"use client";

import React, { useState } from "react";
import TitleBar from "@/Components/TitleBar";
import { FiPlus, FiMinus, FiTrash, FiX } from "react-icons/fi";
import TimeInputPopup from "@/Components/TimeInputPopup";

export default function CreatePlan() {
  const [showPopup, setShowPopup] = useState<boolean>(false);
  const [medName, setMedName] = useState<string>("");
  const [totalPills, setTotalPills] = useState<string>("");
  const [dose, setDose] = useState<number>(0);
  const [times, setTimes] = useState<string[]>([]);
  const [images, setImages] = useState<File[]>([]);
  const [note, setNote] = useState<string>("");
  const [newTime, setNewTime] = useState("");

  interface PillReminder {
    medName: string;
    totalPills: string;
    dose: number;
    times: string[];
    images: File[];
    note: string;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤
  const addTime = (time: string) => {
    if (time && !times.includes(time)) {  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô times
      setTimes([...times, time]);
    } else {
      console.log("‚ö†Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");
    }
    setNewTime("");  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
  const removeTime = (index: number) => {
    setTimes(times.filter((_, i) => i !== index));
  };

  // ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
  const sortedTimes = times.sort((a, b) => {
    const [hourA, minuteA] = a.split(":").map(Number);
    const [hourB, minuteB] = b.split(":").map(Number);
    
    if (hourA === hourB) {
      return minuteA - minuteB;
    }
    return hourA - hourB;
  });


  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!event.target.files) return;
    const files = Array.from(event.target.files);
    setImages((prev) => [...prev, ...files]);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const removeImage = (index: number) => {
    setImages(images.filter((_, i) => i !== index));
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤
  const handleSavePill = async () => {
    const pillData: PillReminder = {
      medName,
      totalPills,
      dose,
      times,
      images,
      note,
    };
    console.log("üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", pillData);
  };

  return (
    <div className="flex flex-col items-center w-full min-h-screen bg-sec">
      <TitleBar title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô" href="/PillReminder" />

      {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ */}
      <div className="w-10/12 mt-10">
        <label
          htmlFor="medName"
          className="block text-lg font-medium text-black mb-2"
        >
          ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤
        </label>
        <input
          id="medName"
          type="text"
          value={medName}
          onChange={(e) => setMedName(e.target.value)}
          className="w-full h-14  bg-white rounded-xl px-4 text-black border border-grey500"
          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤"
        />
      </div>

      {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
      <div className="w-10/12 mt-5">
        <label
          htmlFor="totalPills"
          className="block text-lg font-medium text-black mb-2"
        >
          ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        </label>
        <input
          id="totalPills"
          type="text"
          value={totalPills}
          onChange={(e) => setTotalPills(e.target.value)}
          className="w-full h-14 bg-white rounded-xl px-4 text-black border border-grey500"
          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        />
      </div>

      {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏°‡∏∑‡πâ‡∏≠ */}
      <div className="w-10/12 mt-5">
        <label className="block text-lg font-medium text-black mb-2">
          ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏°‡∏∑‡πâ‡∏≠
        </label>
        <div className="flex items-center justify-between space-x-2 rounded-xl h-14">
          {/* ‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢ */}
          <div className="flex justify-center items-center text-lg w-full h-14 bg-white rounded-lg border border-grey500 ">
            <button
              onClick={() => setDose(Math.max(0, dose - 1))}
              className="mr-4 px-2 py-1 rounded-lg text-black"
            >
              <FiMinus />
            </button>
            <span className="text-lg">{dose}</span>
            <button
              onClick={() => setDose(dose + 1)}
              className="ml-4 px-2 py-1 rounded-lg text-black"
            >
              <FiPlus />
            </button>
          </div>

          {/* ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤ */}
          <div className="flex justify-center items-center text-lg w-full h-14 bg-white rounded-lg border border-grey500 ">
            ‡πÄ‡∏°‡πá‡∏î
          </div>
        </div>
      </div>

      {/* ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô */}
      <div className="w-10/12 mt-5">
        <label className="block text-lg font-medium text-black mb-2">
          ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô
        </label>

        <div className="flex flex-wrap gap-2 items-center">
          {sortedTimes.map((time, index) => (
            <div
              key={index}
              className="flex items-center bg-white rounded-lg border border-grey500 px-4 w-26 h-14"
            >
              <span className="text-black text-lg">{time} ‡∏ô.</span>
              <button
                onClick={() => removeTime(index)}
                className="ml-2 text-red-500"
              >
                <FiX />
              </button>
            </div>
          ))}

          <button
            onClick={() => setShowPopup(true)}
            className="w-14 h-14 flex items-center justify-center bg-white rounded-full border border-grey500 cursor-pointer"
          >
            <FiPlus className="text-black text-xl" />
          </button>
        </div>
      </div>

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ */}
      <input
        type="file"
        multiple
        accept="image/*"
        onChange={handleImageUpload}
        className="hidden"
        id="imageUpload"
      />
      <label
        htmlFor="imageUpload"
        className="w-10/12 h-24 mt-5 bg-white rounded-xl flex items-center justify-center border border-dashed cursor-pointer"
      >
        <FiPlus className="mr-2" /> ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
      </label>

      <div className="flex flex-wrap w-10/12 mt-3">
        {images.map((img, index) => (
          <div key={index} className="relative m-1">
            <img
              src={URL.createObjectURL(img)}
              alt="‡∏¢‡∏≤"
              className="w-20 h-20 rounded"
            />
            <button
              onClick={() => removeImage(index)}
              className="absolute top-0 right-0 bg-red-500 text-white p-1 rounded-full"
            >
              <FiTrash />
            </button>
          </div>
        ))}
      </div>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      <div
        onClick={() => handleSavePill()}
        className="flex w-10/12 h-14 bottom-24 bg-orange300 font-bold text-body1 text-white rounded-xl justify-center items-center"
      >
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      </div>

      {/* Popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ */}
      {showPopup && (
        <TimeInputPopup
          onClose={() => setShowPopup(false)}
          onSave={addTime}
        />
      )}
    </div>
  );
}